https://docs.google.com/document/d/16DzZ6PuVihKu94T0AfuHUg6mK5MzrROM5wrMyioyb8c/edit?usp=sharing 

1.We are testing the login POST api within server.spec.js. This includes accessing the page by requesting from the server the page /login. Then we will test the ability to login to an account that already exists, as well as an invalid login attempt to test error catching. For example in our negative login API, we threw a ‘null’ value where the login returns successfully and doesn’t reroute to the discover page. Whereas in our positive login API, we threw a dummy variable stored within our database, and the login again returns successfully and reroutes to the discover page where the navigation bar appears.
2.We are testing the register POST api within server.spec.js. This includes the ability to reach /register, as well as registering an account on top of creating an account with invalid credentials. We will have an error catch for invalid characters for usernames and passwords. Each test will have a resulting body.message so we can confirm the working order. For example in our negative register API, we threw a null response, that should return successfully and the user should be prompted an ‘invalid response’ or ‘error’ message. We can further plan to implement UX features such as messages like, ‘field required’.
3.We are testing the discover POST api within server.spec.js. This includes accessing the discover page with a confirmation message after logging in successfully. The components within in the Discover page we are featuring are a table of ski resorts in Colorado and what features are most pertinent to that specific resort possible, a navigation bar that takes you to the discover page and the calendar page, and a filter option to sort through the ski resorts allow the user to align their needs as such. In order to test this, we will have to incorporate a ski resorts database into our project code and access it accordingly to allow the user to learn about and pick out the resort that matches their needs the most. We will only know the desired results if we log in successfully and each filter option and/or combination of filters will display the correct ski resorts. We might consider options like city, elevation, and other elements included within our resorts database. We will test this out within our localhost docker container and document results with each other.
